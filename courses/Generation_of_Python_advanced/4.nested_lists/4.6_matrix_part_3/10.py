"""
На вход программе подаются два натуральных числа n и m. Напишите программу,
которая создает матрицу размером n×m, заполнив ее "спиралью" в соответствии с
образцом.

Формат входных данных
На вход программе на одной строке подаются два натуральных числа n и m –
количество строк и столбцов в матрице.

Формат выходных данных
Программа должна вывести матрицу в соответствии образцом.

Примечание. Для вывода элементов матрицы как в примерах отводите ровно 3
символа на каждый элемент. Для этого используйте строковый метод ljust().
Можно обойтись и без ljust(), система примет и такое решение.

Тестовые данные

Sample Input 1:
4 5

Sample Output 1:
1  2  3  4  5
14 15 16 17 6
13 20 19 18 7
12 11 10 9  8

Sample Input 2:
1 6

Sample Output 2:
1  2  3  4  5  6

Sample Input 3:
3 3

Sample Output 3:
1  2  3
8  9  4
7  6  5
"""

# # Принимаем параметры матрицы
# # Альтернативный код: n, m = [int(i) for i in input().split()]
# n, m = map(int, input().split())
#
# # Создаем нулевую матрицу размером 'n x m'
# matrix = [[0] * m for _ in range(n)]
#
# # Задаем параметры направления смещения
# # row_dir - смещение по строкам
# # col_dir - смещение по столбцам
# # Как видно в нашем случае мы двинемся горизонтально вправо
# row_dir, col_dir = 0, 1
#
# # Задаем координаты стартовой ячейки
# row, column = 0, 0
#
# # Цикл-счетчик порядкового номера от 1 до n * m
# for counter in range(1, n * m + 1):
#     # Присваиваем текущей ячейке номер счетчика
#     matrix[row][column] = counter
#     # Проверяем, не пора ли сделать поворот?
#     # Проблема выхода за пределы матрицы решается делением с остатком
#     if matrix[(row + row_dir) % n][(column + col_dir) % m]:
#         # Поворачиваем направление смещения по часовой стрелке на 90 градусов
#         row_dir, col_dir = col_dir, -row_dir
#     # Задаем координаты следующей ячейки в соответствии с направлением смещения
#     row += row_dir
#     column += col_dir
#
# # Распечатываем заполненную матрицу
# for row in matrix:
#     # переводим матрицу в строковый формат для эстетики отображения
#     print(*(f'{e:<3}' for e in row), sep='')

n, m = map(int, input().split())
matrix = [[0] * m for _ in range(n)]
count = 1
i = 0
j = 0

while count < m * n:
    while j < m - 1 and matrix[i][j + 1] == 0:
        matrix[i][j] = str(count).ljust(3)
        j += 1
        count += 1

    while i < n - 1 and matrix[i + 1][j] == 0:
        matrix[i][j] = str(count).ljust(3)
        i += 1
        count += 1

    while j > 0 and matrix[i][j - 1] == 0:
        matrix[i][j] = str(count).ljust(3)
        j -= 1
        count += 1

    while i > 0 and matrix[i - 1][j] == 0:
        matrix[i][j] = str(count).ljust(3)
        i -= 1
        count += 1

matrix[i][j] = str(count).ljust(3)

for row in matrix:
    print(*row)
