"""
Объявите функцию с именем get_list, одним параметром и следующим описанием в
теле функции:
'''Функция для формирования списка целых значений'''

Сама функция должна формировать и возвращать список целых чисел, который
передается ей на вход в виде строки из целых чисел, записанных через пробел.

Определите декоратор, который выполняет суммирование значений списка,
возвращаемого декорируемой функцией и возвращает результат. Внутри декоратора
декорируйте переданную функцию с помощью команды @wraps (не забудьте сделать
импорт: from functools import wraps).

Такое декорирование необходимо, чтобы исходная функция get_list сохраняла
свои локальные свойства: __name__ и __doc__.
"""
from functools import wraps


def get_sum_list(func):
    """Декоратор. Выполняет суммирование значений списка."""

    @wraps(func)
    def wrapper(*args, **kwargs):
        return sum(func(*args, **kwargs))

    return wrapper


@get_sum_list
def get_list(string):
    """Функция для формирования списка целых значений"""
    return list(map(int, string.split()))


if __name__ == '__main__':
    print(get_list('1 2 3 4 5'), get_list.__name__, get_list.__doc__, sep='\n')
